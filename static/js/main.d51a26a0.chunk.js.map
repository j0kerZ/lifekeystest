{"version":3,"sources":["Components/Admin.js","Components/User.js","App.js","serviceWorker.js","index.js"],"names":["Admin","props","state","codes","getcodes","bind","Axios","post","action","then","res","console","log","catch","error","this","className","to","type","class","value","src","process","products","Component","Home","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wVAOqBA,E,kDACpB,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IAKPC,MAAQ,CACPC,MAAO,IAJP,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAHC,E,uDAWjBC,IAAMC,KAfQ,kDAeM,CACnBC,OAAO,WAEPC,MAAK,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,MACtBG,OAAM,SAAAC,GACNH,QAAQC,IAAIE,Q,0CAKbC,KAAKX,a,+BAIL,OACC,yBAAKY,UAAU,OACd,4BAAQA,UAAU,eACjB,kBAAC,IAAD,CAAMC,GAAG,KACR,2BAAOC,KAAK,SAASC,MAAM,aAAaC,MAAM,UAE/C,yBAAKD,MAAM,UAAS,yBAAKA,MAAM,UAAS,yBAAKA,MAAM,UACnD,yBAAKE,IAAKC,sBAAiCN,UAAU,UAEtD,2BACED,KAAKb,MAAMqB,e,GApCkBC,aCJdxB,E,uKAEjB,OACC,yBAAKgB,UAAU,OACb,4BAAQA,UAAU,eAChB,kBAAC,IAAD,CAAMC,GAAG,KACR,2BAAOC,KAAK,SAASC,MAAM,aAAaC,MAAM,UAE/C,yBAAKD,MAAM,UAAS,yBAAKA,MAAM,UAAS,yBAAKA,MAAM,UACnD,yBAAKE,IAAKC,sBAAiCN,UAAU,e,GAT3BQ,aCyBnC,SAASC,IACP,OACE,yBAAKT,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKK,IAAKC,sBAAiCN,UAAU,aACrD,2CAGA,6BACE,kBAAC,IAAD,CAAMC,GAAG,UACP,2BAAOC,KAAK,SAASF,UAAU,SAASI,MAAM,WAEhD,yBAAKJ,UAAU,UACf,kBAAC,IAAD,CAAMC,GAAG,SACP,2BAAOC,KAAK,SAASF,UAAU,SAASI,MAAM,aAQ3CM,M,uKAxCX,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAACH,EAAD,a,GAZMD,aCIEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGHC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM8B,c","file":"static/js/main.d51a26a0.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Axios from 'axios';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst codeurl = 'https://satiated-toe.000webhostapp.com/code.php'\r\nconst produrl = 'https://satiated-toe.000webhostapp.com/product.php'\r\n\r\nexport default class Admin extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.getcodes = this.getcodes.bind(this);\r\n\t}\r\n\r\n\tstate = {\r\n\t\tcodes: []\r\n\t}\r\n\r\n\tgetcodes() {\r\n\t\tAxios.post(codeurl, {\r\n\t\t\taction:'getall'\r\n\t\t})\r\n\t\t.then(res=>console.log(res))\r\n\t\t.catch(error => {\r\n\t\t\tconsole.log(error);\r\n\t\t})\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.getcodes();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<header className=\"page-header\">\r\n\t\t\t\t\t<Link to=\"/\">\r\n\t\t\t\t\t\t<input type=\"button\" class=\"homebutton\" value=\"Home\"/>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t\t<div class=\"space\"/><div class=\"space\"/><div class=\"space\"/>\r\n\t\t\t\t\t<img src={process.env.PUBLIC_URL+'/0.png'} className=\"logo\"/>\r\n\t\t\t\t</header>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t{this.state.products}\r\n\t\t\t\t</p>\r\n\t\t    </div>\r\n\t\t);\r\n\t}\r\n}","import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default class Admin extends Component {\r\n  render(){\r\n    return (\r\n    \t<div className=\"App\">\r\n\t      <header className=\"page-header\">\r\n\t        <Link to=\"/\">\r\n\t        \t<input type=\"button\" class=\"homebutton\" value=\"Home\"/>\r\n\t        </Link>\r\n\t        <div class=\"space\"/><div class=\"space\"/><div class=\"space\"/>\r\n\t        <img src={process.env.PUBLIC_URL+'/0.png'} className=\"logo\"/>\r\n\t      </header>\r\n\t    </div>\r\n    );\r\n  }\r\n}","import React, {Component} from 'react';\nimport {Switch, Route, Link} from \"react-router-dom\";\nimport './App.css';\nimport './Style.css';\nimport Admin from './Components/Admin';\nimport User from './Components/User';\n\n\nclass App extends Component {\n  render(){\n    return (\n      <div>\n        <Switch>\n          <Route exact path=\"/Admin\"> \n            <Admin />\n          </Route>\n          <Route exact path=\"/User\"> \n            <User />\n          </Route>\n          <Route path=\"/\"> \n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nfunction Home() {\n  return(\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={process.env.PUBLIC_URL+'/0.png'} className=\"App-logo\"/>\n        <p>\n          Who you are?\n        </p>\n        <div>\n          <Link to=\"/Admin\">\n            <input type=\"button\" className=\"button\" value=\"Admin\"/>\n          </Link>\n          <div className=\"space\"/>\n          <Link to=\"/User\">\n            <input type=\"button\" className=\"button\" value=\"User\"/>\n          </Link> \n        </div>\n      </header>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<BrowserRouter>\n    \t<App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}